const { EmbedBuilder, ActionRowBuilder } = require("discord.js");
const { ITEM_RARITY } = require("../../config/constants");
const SpiritService = require("../../services/DauLaDaiLuc/spiritService");
const SpiritMaster = require("../../models/DauLaDaiLuc/SpiritMaster");
const Item = require("../../models/Item");
const Inventory = require("../../models/Inventory");
const Spirit = require("../../models/DauLaDaiLuc/Spirit");

class SpiritController {
    static async awakenRandomSpirit(userId) {
        try {
            // ƒê·∫øm s·ªë l·∫ßn th·ª©c t·ªânh c·ªßa userId
            const awakeningCount = await SpiritMaster.countDocuments({ userId });

            // N·∫øu ƒë√£ th·ª©c t·ªânh 2 l·∫ßn
            if (awakeningCount >= 2) {
                return SpiritController.createErrorEmbed('‚ùå ƒê√£ ƒë·∫°t gi·ªõi h·∫°n th·ª©c t·ªânh!', 'B·∫°n ƒë√£ th·ª©c t·ªânh t·ªëi ƒëa 2 v≈© h·ªìn. Kh√¥ng th·ªÉ th·ª©c t·ªânh th√™m.');
            }

            // N·∫øu ƒë√£ th·ª©c t·ªânh 1 l·∫ßn (chu·∫©n b·ªã th·ª©c t·ªânh l·∫ßn 2)
            if (awakeningCount === 1) {
                // Ki·ªÉm tra v·∫≠t ph·∫©m "T·∫©y l·ªÖ v√µ h·ªìn"
                const resetItem = await Item.findOne({
                    itemRef: 'SPI1',
                });

                if (!resetItem) {
                    return SpiritController.createErrorEmbed('‚ùå L·ªói h·ªá th·ªëng!', 'V·∫≠t ph·∫©m th·ª©c t·ªânh kh√¥ng t·ªìn t·∫°i.');
                }

                // Ki·ªÉm tra trong inventory
                const userInventory = await Inventory.findOne({
                    userId,
                    item: resetItem._id
                });

                if (!userInventory || userInventory.quantity < 1) {
                    return SpiritController.createErrorEmbed('‚ùå Thi·∫øu v·∫≠t ph·∫©m!', 'B·∫°n c·∫ßn c√≥ "T·∫©y l·ªÖ v√µ h·ªìn" ƒë·ªÉ th·ª©c t·ªânh song sinh v√µ h·ªìn.');
                }

                // Tr·ª´ v·∫≠t ph·∫©m
                await Inventory.findOneAndUpdate(
                    { userId, item: resetItem._id },
                    { $inc: { quantity: -1 } }
                );
            }

            // L·∫•y ng·∫´u nhi√™n m·ªôt v≈© h·ªìn t·ª´ database
            const randomSpirit = await SpiritController.getRandomSpirit();

            if (!randomSpirit) {
                return SpiritController.createErrorEmbed('‚ùå L·ªói h·ªá th·ªëng!', 'Kh√¥ng t√¨m th·∫•y v≈© h·ªìn n√†o trong database.');
            }

            // T·∫°o record th·ª©c t·ªânh m·ªõi
            const newSpiritMaster = new SpiritMaster({
                userId,
                spirit: randomSpirit._id,
                equipRing: []
            });

            await newSpiritMaster.save();

            // L·∫•y t·∫•t c·∫£ v≈© h·ªìn c·ªßa user ƒë·ªÉ hi·ªÉn th·ªã
            const userSpirits = await SpiritMaster.find({ userId })
                .populate('spirit')
            // .populate('equipRing');

            return SpiritController.createSuccessEmbed(userSpirits, awakeningCount + 1);

        } catch (error) {
            console.error('L·ªói th·ª©c t·ªânh v≈© h·ªìn:', error);
            return SpiritController.createErrorEmbed('‚ùå L·ªói h·ªá th·ªëng!', 'ƒê√£ x·∫£y ra l·ªói khi th·ª©c t·ªânh v≈© h·ªìn.');
        }
    }
    static async getSpiritInfo(userId) {
        try {
            // L·∫•y t·∫•t c·∫£ spirit master c·ªßa user - CH·ªà POPULATE SPIRIT
            const spiritMasters = await SpiritMaster.find({ userId })
                .populate('spirit'); // B·ªé populate('equipRing')

            if (spiritMasters.length === 0) {
                return { content: '‚ùå B·∫°n ch∆∞a th·ª©c t·ªânh v≈© h·ªìn n√†o. H√£y s·ª≠ d·ª•ng `/awake` ƒë·ªÉ th·ª©c t·ªânh.' };
            }

            // T·∫°o embed cho t·ª´ng v≈© h·ªìn
            const embeds = [];

            for (const spiritMaster of spiritMasters) {
                const spirit = spiritMaster.spirit;

                // L·∫•y th√¥ng tin spirit rings n·∫øu c√≥ (kh√¥ng populate)
                let spiritRings = [];
                if (spiritMaster.equipRing && spiritMaster.equipRing.length > 0) {
                    // N·∫øu equipRing l√† ObjectId, kh√¥ng populate ƒë∆∞·ª£c th√¨ b·ªè qua
                    if (typeof spiritMaster.equipRing[0] === 'string' ||
                        spiritMaster.equipRing[0] instanceof mongoose.Types.ObjectId) {
                        // Ch·ªâ hi·ªÉn th·ªã s·ªë l∆∞·ª£ng h·ªìn ho√†n, kh√¥ng hi·ªÉn th·ªã chi ti·∫øt
                        spiritRings = [{ info: `${spiritMaster.equipRing.length} h·ªìn ho√†n` }];
                    } else {
                        spiritRings = spiritMaster.equipRing;
                    }
                }

                const totalStats = this.calculateTotalStats(spirit, spiritRings);

                const embed = new EmbedBuilder()
                    .setColor(this.getRarityColor(spirit.rarity))
                    .setTitle(`${spirit.icon ? spirit.icon : "<:LamNganThao:1409172636910751805>"} ${spirit.name} - ${spirit.rarity}`)
                    .setThumbnail(spirit.imgUrl)
                    .setDescription(spirit.description || 'Kh√¥ng c√≥ m√¥ t·∫£');

                // Th√™m field icon (n·∫øu c√≥)
                // if (spirit.icon) {
                //     embed.addFields({
                //         name: 'üñºÔ∏è Icon',
                //         value: spirit.icon,
                //         inline: true
                //     });
                // }

                // Th√™m ch·ªâ s·ªë c∆° b·∫£n c·ªßa spirit
                const fields = [
                    { name: '‚ù§Ô∏è HP', value: spirit.hp.toString(), inline: true },
                    { name: '‚öîÔ∏è ATK', value: spirit.atk.toString(), inline: true },
                    { name: 'üõ°Ô∏è DEF', value: spirit.def.toString(), inline: true },
                    { name: 'üåÄ SP', value: spirit.sp.toString(), inline: true }
                ];

                // Th√™m th√¥ng tin h·ªìn ho√†n n·∫øu c√≥
                if (spiritRings.length > 0) {
                    if (spiritRings[0].info) {
                        // Ch·ªâ hi·ªÉn th·ªã s·ªë l∆∞·ª£ng
                        fields.push({
                            name: '<a:1000nam:1408868369951752233> H·ªìn Ho√†n',
                            value: spiritRings[0].info,
                            inline: false
                        });
                    } else {
                        // Hi·ªÉn th·ªã chi ti·∫øt h·ªìn ho√†n (n·∫øu c√≥ d·ªØ li·ªáu)
                        let ringsInfo = '';
                        let ringsStats = { hp: 0, atk: 0, def: 0, sp: 0 };

                        spiritRings.forEach(ring => {
                            ringsInfo += `${ring.icon || '<a:1000nam:1408868369951752233>'} **${ring.years || '?'} nƒÉm**\n`;
                            ringsStats.hp += ring.hp || 0;
                            ringsStats.atk += ring.atk || 0;
                            ringsStats.def += ring.def || 0;
                            ringsStats.sp += ring.sp || 0;
                        });

                        fields.push(
                            {
                                name: `<a:1000nam:1408868369951752233> H·ªìn Ho√†n (${spiritRings.length})`,
                                value: ringsInfo,
                                inline: false
                            },
                            {
                                name: 'üìä Bonus t·ª´ H·ªìn Ho√†n',
                                value: `‚ù§Ô∏è +${ringsStats.hp} | ‚öîÔ∏è +${ringsStats.atk} | üõ°Ô∏è +${ringsStats.def} | üåÄ +${ringsStats.sp}`,
                                inline: false
                            }
                        );
                    }
                } else {
                    fields.push({
                        name: '<a:1000nam:1408868369951752233> H·ªìn Ho√†n',
                        value: 'Ch∆∞a trang b·ªã h·ªìn ho√†n',
                        inline: false
                    });
                }

                // Th√™m t·ªïng ch·ªâ s·ªë
                fields.push({
                    name: 'üéØ T·ªïng Ch·ªâ S·ªë',
                    value: `‚ù§Ô∏è **${totalStats.hp}** | ‚öîÔ∏è **${totalStats.atk}** | üõ°Ô∏è **${totalStats.def}** | üåÄ **${totalStats.sp}**`,
                    inline: false
                });

                // Th√™m th√¥ng tin ti·∫øn h√≥a n·∫øu c√≥
                if (spirit.nextId) {
                    fields.push({
                        name: '‚ú® C√≥ th·ªÉ ti·∫øn h√≥a',
                        value: `V≈© h·ªìn n√†y c√≥ th·ªÉ ti·∫øn h√≥a l√™n c·∫•p cao h∆°n`,
                        inline: false
                    });
                }

                embed.addFields(fields)
                    .setFooter({ text: `V≈© h·ªìn c·ªßa ${userId}` })
                    .setTimestamp();

                embeds.push(embed);
            }

            return { embeds: embeds };

        } catch (error) {
            console.error('L·ªói khi l·∫•y th√¥ng tin v≈© h·ªìn:', error);
            return { content: '‚ùå ƒê√£ x·∫£y ra l·ªói khi l·∫•y th√¥ng tin v≈© h·ªìn.' };
        }
    }

    // H√†m t√≠nh t·ªïng ch·ªâ s·ªë (x·ª≠ l√Ω spiritRings c√≥ th·ªÉ null/undefined)
    static calculateTotalStats(spirit, spiritRings = []) {
        const totalStats = {
            hp: spirit.hp || 0,
            atk: spirit.atk || 0,
            def: spirit.def || 0,
            sp: spirit.sp || 0
        };

        // Ch·ªâ c·ªông th√™m n·∫øu spiritRings l√† array v√† c√≥ ph·∫ßn t·ª≠
        if (Array.isArray(spiritRings) && spiritRings.length > 0) {
            // N·∫øu l√† object c√≥ ch·ª©a stats
            if (spiritRings[0].hp !== undefined) {
                spiritRings.forEach(ring => {
                    totalStats.hp += ring.hp || 0;
                    totalStats.atk += ring.atk || 0;
                    totalStats.def += ring.def || 0;
                    totalStats.sp += ring.sp || 0;
                });
            }
            // N·∫øu kh√¥ng c√≥ stats, ch·ªâ c·ªông bonus c·ªë ƒë·ªãnh (v√≠ d·ª•: m·ªói h·ªìn ho√†n +10 stats)
            else {
                const bonusPerRing = 10;
                totalStats.hp += spiritRings.length * bonusPerRing;
                totalStats.atk += spiritRings.length * bonusPerRing;
                totalStats.def += spiritRings.length * bonusPerRing;
                totalStats.sp += spiritRings.length * bonusPerRing;
            }
        }

        return totalStats;
    }



    // H√†m l·∫•y ng·∫´u nhi√™n m·ªôt v≈© h·ªìn t·ª´ database
    static async getRandomSpirit() {
        try {
            // ƒê·∫øm s·ªë spirit c√≥ isFirstAwake = false
            const totalSpirits = await Spirit.countDocuments({ isFirstAwake: false });
            if (totalSpirits === 0) return null;

            const randomIndex = Math.floor(Math.random() * totalSpirits);

            // T√¨m spirit ng·∫´u nhi√™n trong nh√≥m isFirstAwake = false
            return await Spirit.findOne({ isFirstAwake: true }).skip(randomIndex);
        } catch (error) {
            console.error('L·ªói khi l·∫•y v≈© h·ªìn ng·∫´u nhi√™n:', error);
            return null;
        }
    }


    // H√†m t·∫°o embed l·ªói
    static createErrorEmbed(title, description) {
        return new EmbedBuilder()
            .setColor(0xFF0000)
            .setTitle(title)
            .setDescription(description)
            .setTimestamp();
    }

    // H√†m t·∫°o embed th√†nh c√¥ng
    static createSuccessEmbed(userSpirits, awakeningNumber) {
        const latestSpirit = userSpirits[userSpirits.length - 1].spirit;
        const isSecondAwakening = awakeningNumber === 2;

        const embed = new EmbedBuilder()
            .setColor(SpiritController.getRarityColor(latestSpirit.rarity))
            .setTitle(`üéâ ${isSecondAwakening ? 'Th·ª©c T·ªânh Song Th√†nh C√¥ng!' : 'Th·ª©c T·ªânh Th√†nh C√¥ng!'}`)
            .setDescription(`**${latestSpirit.name}** - ${latestSpirit.rarity} (Th·ª©c t·ªânh l·∫ßn ${awakeningNumber})`)
            .setThumbnail(latestSpirit.imgUrl)
            .addFields(
                { name: 'üìõ T√™n V≈© H·ªìn', value: latestSpirit.name, inline: true },
                { name: '‚≠ê C·∫•p ƒê·ªô', value: latestSpirit.rarity, inline: true },
                { name: '‚öîÔ∏è T·∫•n C√¥ng', value: latestSpirit.atk.toString(), inline: true },
                { name: 'üõ°Ô∏è Ph√≤ng Th·ªß', value: latestSpirit.def.toString(), inline: true },
                { name: 'üåÄ T·ªëc ƒê·ªô', value: latestSpirit.sp.toString(), inline: true },
                { name: 'üìñ M√¥ T·∫£', value: latestSpirit.description.substring(0, 100) + (latestSpirit.description.length > 100 ? '...' : '') }
            );

        // Th√™m th√¥ng tin v·ªÅ s·ªë v≈© h·ªìn hi·ªán c√≥
        if (isSecondAwakening) {
            embed.addFields(
                { name: 'üéØ Tr·∫°ng th√°i', value: 'ƒê√£ th·ª©c t·ªânh song sinh v≈© h·ªìn!', inline: false }
            );
        }

        embed.setFooter({
            text: isSecondAwakening ?
                'Song sinh v√µ h·ªìn ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t!' :
                `B·∫°n c√≥ th·ªÉ th·ª©c t·ªânh th√™m ${2 - awakeningNumber} v≈© h·ªìn n·ªØa`
        }).setTimestamp();

        return embed;
    }

    // H√†m l·∫•y m√†u theo rarity
    static getRarityColor(rarity) {
        const rarityColors = {
            'C': 0x808080, 'SM': 0x00FF00, 'R': 0x0000FF, 'SR': 0x800080,
            'E': 0xFFA500, 'SE': 0xFF0000, 'L': 0xFFFF00, 'SL': 0x00FFFF,
            'MY': 0xFF00FF, 'SMY': 0xFFD700
        };
        return rarityColors[rarity] || 0xFFFFFF;
    }

    // H√†m t·∫°o embed danh s√°ch v≈© h·ªìn
    static createSpiritListEmbed(userSpirits, userId) {
        const embed = new EmbedBuilder()
            .setColor(0x0099FF)
            .setTitle(`üìã Danh s√°ch V≈© H·ªìn - User: ${userId}`)
            .setDescription(`T·ªïng s·ªë: ${userSpirits.length}/2 v≈© h·ªìn`);

        userSpirits.forEach((spiritMaster, index) => {
            const spirit = spiritMaster.spirit;
            embed.addFields({
                name: `üéØ V≈© H·ªìn ${index + 1}: ${spirit.name} [${spirit.rarity}]`,
                value: `‚öîÔ∏è ATK: ${spirit.atk} | üõ°Ô∏è DEF: ${spirit.def} | üåÄ SP: ${spirit.sp}\n${spirit.description.substring(0, 50)}...`,
                inline: false
            });
        });

        if (userSpirits.length < 2) {
            embed.addFields({
                name: 'üí° Th√¥ng tin',
                value: `B·∫°n c√≥ th·ªÉ th·ª©c t·ªânh th√™m ${2 - userSpirits.length} v≈© h·ªìn n·ªØa. L·∫ßn th·ª© 2 c·∫ßn "T·∫©y l·ªÖ v√µ h·ªìn".`,
                inline: false
            });
        }

        return embed;
    }

    static async showAllSpirits(page = 1) {
        try {
            const limit = 5;
            const { spirits, page: currentPage, totalPages, total } = await SpiritService.getAllSpirits(page, limit);

            if (spirits.length === 0) {
                return new EmbedBuilder()
                    .setTitle('üìö Danh S√°ch V≈© H·ªìn')
                    .setDescription('‚ùå Hi·ªán kh√¥ng c√≥ V≈© H·ªìn n√†o trong database!')
                    .setColor(0xFF0000);
            }

            const embed = new EmbedBuilder()
                .setTitle('üìö Danh S√°ch T·∫•t C·∫£ V≈© H·ªìn')
                .setDescription(`**T·ªïng s·ªë:** ${total} V≈© H·ªìn ‚Ä¢ **Trang:** ${currentPage}/${totalPages}\n\nD∆∞·ªõi ƒë√¢y l√† danh s√°ch c√°c V≈© H·ªìn hi·ªán c√≥:`)
                .setColor(this.getRarityColor(spirits[0].rarity))
                .setFooter({
                    text: totalPages > 1 ?
                        `S·ª≠ d·ª•ng /spirit <trang> ƒë·ªÉ xem trang kh√°c ‚Ä¢ Trang ${currentPage}/${totalPages}` :
                        `S·ª≠ d·ª•ng /spirit <t√™n> ƒë·ªÉ xem chi ti·∫øt`
                })
                .setTimestamp();

            spirits.forEach((spirit, index) => {
                const position = (page - 1) * limit + index + 1;
                const evolutionInfo = spirit.nextId ? 'üîÑ' : '‚èπÔ∏è';

                embed.addFields({
                    name: `${this.getRarityEmoji(spirit.rarity)} ${position}.${spirit.icon} ${spirit.name} ${evolutionInfo}`,
                    value: `‚öîÔ∏è${spirit.atk} üõ°Ô∏è${spirit.def} ‚ö°${spirit.sp} ‚Ä¢ **${spirit.rarity}**\n${spirit.description.substring(0, 80)}...`,
                    inline: false
                });
            });

            return embed;

        } catch (error) {
            console.error('‚ùå L·ªói khi hi·ªÉn th·ªã danh s√°ch V≈© H·ªìn:', error);
            return new EmbedBuilder()
                .setTitle('‚ùå L·ªói')
                .setDescription('ƒê√£ x·∫£y ra l·ªói khi t·∫£i danh s√°ch V≈© H·ªìn!')
                .setColor(0xFF0000);
        }
    }
    static async showAllSpiritsTable(page = 1) {
        try {
            const limit = 5;
            const { spirits, page: currentPage, totalPages, total } = await SpiritService.getAllSpirits(page, limit);

            if (spirits.length === 0) {
                return new EmbedBuilder()
                    .setTitle('üìö Danh S√°ch V≈© H·ªìn')
                    .setDescription('‚ùå Hi·ªán kh√¥ng c√≥ V≈© H·ªìn n√†o trong database!')
                    .setColor(0xFF0000);
            }

            // Header b·∫£ng
            let table ;
            table += `#  Icon   T√™n                  ATK  DEF  SP   Rarity         Evo\n`;
            table += `---------------------------------------------------------------\n`;

            spirits.forEach((spirit, index) => {
                const position = (page - 1) * limit + index + 1;
                const evolutionInfo = spirit.nextId ? 'üîÑ' : '‚èπÔ∏è';

                // C·ªôt icon gi·ªØ c·ªë ƒë·ªãnh 5 k√Ω t·ª±, t√™n cƒÉn 20
                table += `${position.toString().padEnd(2)} `;
                table += `${spirit.icon.padEnd(6)} `;
                table += `${spirit.name.padEnd(20)} `;
                table += `${spirit.atk.toString().padEnd(4)}`;
                table += `${spirit.def.toString().padEnd(4)}`;
                table += `${spirit.sp.toString().padEnd(4)}`;
                table += `${spirit.rarity.padEnd(13)}`;
                table += `${evolutionInfo}\n`;
            });

            // table += "```";

            const embed = new EmbedBuilder()
                .setTitle('üìö Danh S√°ch T·∫•t C·∫£ V≈© H·ªìn (B·∫£ng)')
                .setDescription(`**T·ªïng s·ªë:** ${total} V≈© H·ªìn ‚Ä¢ **Trang:** ${currentPage}/${totalPages}\n${table}`)
                .setColor(this.getRarityColor(spirits[0].rarity))
                .setFooter({
                    text: totalPages > 1 ?
                        `S·ª≠ d·ª•ng /spirit <trang> ƒë·ªÉ xem trang kh√°c ‚Ä¢ Trang ${currentPage}/${totalPages}` :
                        `S·ª≠ d·ª•ng /spirit <t√™n> ƒë·ªÉ xem chi ti·∫øt`
                })
                .setTimestamp();

            return embed;

        } catch (error) {
            console.error('‚ùå L·ªói khi hi·ªÉn th·ªã b·∫£ng V≈© H·ªìn:', error);
            return new EmbedBuilder()
                .setTitle('‚ùå L·ªói')
                .setDescription('ƒê√£ x·∫£y ra l·ªói khi t·∫£i danh s√°ch V≈© H·ªìn (b·∫£ng)!')
                .setColor(0xFF0000);
        }
    }


    // H√†m l·∫•y emoji theo ƒë·ªô hi·∫øm
    static getRarityEmoji(rarity) {
        const emojiMap = {
            [ITEM_RARITY.C]: '‚ö™',   // Common
            [ITEM_RARITY.SM]: 'üîµ',  // Semi-Mythic
            [ITEM_RARITY.R]: 'üü¢',   // Rare
            [ITEM_RARITY.SR]: 'üî¥',  // Super Rare
            [ITEM_RARITY.E]: 'üü£',   // Epic
            [ITEM_RARITY.SE]: 'üü†',  // Super Epic
            [ITEM_RARITY.L]: 'üü°',   // Legendary
            [ITEM_RARITY.SL]: 'üü§',  // Super Legendary
            [ITEM_RARITY.MY]: '‚ú®',  // Mythic
            [ITEM_RARITY.SMY]: 'üåü'  // Super Mythic
        };
        return emojiMap[rarity] || '‚ö™';
    }

    // H√†m l·∫•y m√†u theo ƒë·ªô hi·∫øm
    static getRarityColor(rarity) {
        const colorMap = {
            [ITEM_RARITY.C]: 0x888888,   // Gray
            [ITEM_RARITY.SM]: 0x0000FF,  // Blue
            [ITEM_RARITY.R]: 0x00FF00,   // Green
            [ITEM_RARITY.SR]: 0xFF0000,  // Red
            [ITEM_RARITY.E]: 0x800080,   // Purple
            [ITEM_RARITY.SE]: 0xFFA500,  // Orange
            [ITEM_RARITY.L]: 0xFFFF00,   // Yellow
            [ITEM_RARITY.SL]: 0x964B00,  // Brown
            [ITEM_RARITY.MY]: 0xFFD700,  // Gold
            [ITEM_RARITY.SMY]: 0xE6E6FA  // Lavender
        };
        return colorMap[rarity] || 0x0099FF;
    }
    static async addSpirit() {
        try {
            const spiritData = {
                name: "T√† M√¢u B·∫°ch H·ªï",
                description: "V≈© H·ªìn thi√™n ph√∫ c·ªßa ƒê·ªõi M·ªôc B·∫°ch. L√† th√∫ v≈© h·ªìn h·ªá c∆∞·ªùng c√¥ng. C√≥ ti·ªÅm nƒÉng tr·ªü th√†nh V≈© H·ªìn m·∫°nh nh·∫•t.",
                imgUrl: "https://i.ibb.co/XxjTqtJ3/BachHo.png",
                atk: 90,
                def: 78,
                sp: 56
            };

            // T√¨m ho·∫∑c t·∫°o m·ªõi
            const spirit = await Spirit.findOneAndUpdate(
                { name: "Nhu C·ªët Th·ªè" }, // ƒêi·ªÅu ki·ªán t√¨m
                spiritData, // D·ªØ li·ªáu c·∫≠p nh·∫≠t
                {
                    upsert: true, // N·∫øu kh√¥ng t√¨m th·∫•y th√¨ t·∫°o m·ªõi
                    new: true, // Tr·∫£ v·ªÅ document sau khi update
                    runValidators: true // Ch·∫°y validation
                }
            );
            const spiritData1 = {
                name: "Nhu C·ªët Th·ªè",
                description: "V≈© H·ªìn thi√™n ph√∫ c·ªßa Ti·ªÉu V≈©. L√† th√∫ v≈© h·ªìn h·ªá m·∫´n c√¥ng. C√≥ ti·ªÅm nƒÉng tr·ªü th√†nh V≈© H·ªìn m·∫°nh nh·∫•t.",
                imgUrl: "https://i.ibb.co/XxjTqtJ3/BachHo.png",
                atk: 85,
                def: 56,
                sp: 95
            };

            // T√¨m ho·∫∑c t·∫°o m·ªõi
            const spirit1 = await Spirit.findOneAndUpdate(
                { name: "Nhu C·ªët Th·ªè" }, // ƒêi·ªÅu ki·ªán t√¨m
                spiritData1, // D·ªØ li·ªáu c·∫≠p nh·∫≠t
                {
                    upsert: true, // N·∫øu kh√¥ng t√¨m th·∫•y th√¨ t·∫°o m·ªõi
                    new: true, // Tr·∫£ v·ªÅ document sau khi update
                    runValidators: true // Ch·∫°y validation
                }
            );

            const spiritData2 = {
                name: "T√† H·ªèa Ph∆∞·ª£ng Ho√†ng",
                description: "V≈© H·ªìn thi√™n ph√∫ c·ªßa M√£ H·ªìng Tu·∫•n. L√† th√∫ v≈© h·ªìn h·ªá c∆∞·ªùng c√¥ng. C√≥ ti·ªÅm nƒÉng tr·ªü th√†nh V≈© H·ªìn m·∫°nh nh·∫•t.",
                imgUrl: "https://i.ibb.co/XxjTqtJ3/BachHo.png",
                atk: 95,
                def: 87,
                sp: 78
            };

            // T√¨m ho·∫∑c t·∫°o m·ªõi
            const spirit2 = await Spirit.findOneAndUpdate(
                { name: "T√† H·ªèa Ph∆∞·ª£ng Ho√†ng" }, // ƒêi·ªÅu ki·ªán t√¨m
                spiritData2, // D·ªØ li·ªáu c·∫≠p nh·∫≠t
                {
                    upsert: true, // N·∫øu kh√¥ng t√¨m th·∫•y th√¨ t·∫°o m·ªõi
                    new: true, // Tr·∫£ v·ªÅ document sau khi update
                    runValidators: true // Ch·∫°y validation
                }
            );
            const spiritData3 = {
                name: "La Tam Ph√°o",
                description: "V≈© H·ªìn thi√™n ph√∫ c·ªßa L√£o S∆∞. L√† th√∫ v≈© h·ªìn bi·∫øn d·ªã t·ª´ Lam ƒêi·ªán B√° V∆∞∆°ng Long. C√≥ ti·ªÅm nƒÉng tr·ªü th√†nh V≈© H·ªìn m·∫°nh nh·∫•t.",
                imgUrl: "https://i.ibb.co/C3kXGWbv/La-Tam-Phao.png",
                atk: 65,
                def: 56,
                sp: 56
            };

            // T√¨m ho·∫∑c t·∫°o m·ªõi
            const spirit3 = await Spirit.findOneAndUpdate(
                { name: "La Tam Ph√°o" }, // ƒêi·ªÅu ki·ªán t√¨m
                spiritData3, // D·ªØ li·ªáu c·∫≠p nh·∫≠t
                {
                    upsert: true, // N·∫øu kh√¥ng t√¨m th·∫•y th√¨ t·∫°o m·ªõi
                    new: true, // Tr·∫£ v·ªÅ document sau khi update
                    runValidators: true // Ch·∫°y validation
                }
            );

            const spiritData4 = {
                name: "U Minh Linh Mi√™u",
                description: "V≈© H·ªìn thi√™n ph√∫ c·ªßa Chu Tr√∫c Thanh. L√† th√∫ v≈© h·ªìn h·ªá m·∫´n c√¥ng. C√≥ ti·ªÅm nƒÉng tr·ªü th√†nh V≈© H·ªìn m·∫°nh nh·∫•t.",
                imgUrl: "https://i.ibb.co/s8m84d1/UMinh-Linh-Mieu.png",
                atk: 78,
                def: 67,
                sp: 89
            };

            // T√¨m ho·∫∑c t·∫°o m·ªõi
            const spirit4 = await Spirit.findOneAndUpdate(
                { name: "U Minh Linh Mi√™u" }, // ƒêi·ªÅu ki·ªán t√¨m
                spiritData4, // D·ªØ li·ªáu c·∫≠p nh·∫≠t
                {
                    upsert: true, // N·∫øu kh√¥ng t√¨m th·∫•y th√¨ t·∫°o m·ªõi
                    new: true, // Tr·∫£ v·ªÅ document sau khi update
                    runValidators: true // Ch·∫°y validation
                }
            );
            const spiritData5 = {
                name: "H·∫°o Thi√™n Ch√πy",
                description: "V≈© H·ªìn thi√™n ph√∫ c·ªßa H·∫°o Thi√™n T√¥ng. L√† th√∫ v≈© h·ªìn h·ªá c∆∞·ªùng c√¥ng. C√≥ ti·ªÅm nƒÉng tr·ªü th√†nh V≈© H·ªìn m·∫°nh nh·∫•t.",
                imgUrl: "https://i.ibb.co/hRcjzSRc/Hao-Thien-Chuy.png",
                atk: 99,
                def: 89,
                sp: 78
            };

            // T√¨m ho·∫∑c t·∫°o m·ªõi
            const spirit5 = await Spirit.findOneAndUpdate(
                { name: "H·∫°o Thi√™n Ch√πy" }, // ƒêi·ªÅu ki·ªán t√¨m
                spiritData5, // D·ªØ li·ªáu c·∫≠p nh·∫≠t
                {
                    upsert: true, // N·∫øu kh√¥ng t√¨m th·∫•y th√¨ t·∫°o m·ªõi
                    new: true, // Tr·∫£ v·ªÅ document sau khi update
                    runValidators: true // Ch·∫°y validation
                }
            );
            // console.log('‚úÖ Lam Ng√¢n Th·∫£o Ho√†ng ƒë√£ ƒë∆∞·ª£c import th√†nh c√¥ng:', spirit);
            console.log(spirit1)
            console.log(spirit2)
            console.log(spirit3)
            console.log(spirit4)
            console.log(spirit5)

            return spirit;

        } catch (error) {
            console.error('‚ùå L·ªói khi import Lam Ng√¢n Th·∫£o Ho√†ng:', error);
            throw error;
        }
    }
}

module.exports = SpiritController;